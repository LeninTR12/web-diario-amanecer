---
import type { Link } from "@/lib/types";

type Props = {
  item: Link;
};
const currentPath = Astro.url.pathname;
const { item } = Astro.props;

function removeAcents(text: string) {
  const accents: Record<string, string> = {
    á: "a",
    é: "e",
    í: "i",
    ó: "o",
    ú: "u",
    ñ: "n",
  };

  return text
    .toLowerCase()
    .split("")
    .map((char) => accents[char] || char)
    .join("");
}

function isActive(item: Link, currentPath: string) {
  const segment = currentPath.split("/")[2];
  return (
    (item.text === "Actualidad" && currentPath === "/") ||
    (item.text !== "Actualidad" &&
      currentPath.split("/").includes(removeAcents(item.text)))
  );
}

function formatHref(href: string) {
  return href === "/" ? "/" : `${href}`;
}
---

<li
  class:list={[
    "relative after:absolute after:-bottom-2 after:left-0 after:w-full flex  items-center justify-center after:transition-all after:duration-300 text-base uppercase font-medium",
    isActive(item, currentPath)
      ? "after:bg-base-content pointer-events-none text-[#FB0808]"
      : "after:bg-transparent",
  ]}
>
  {
    isActive(item, currentPath) ? (
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="currentColor"
        class="icon icon-tabler icons-tabler-filled icon-tabler-point"
      >
        <>
          <path stroke="none" d="M0 0h24v24H0z" fill="none" />
          <path d="M12 7a5 5 0 1 1 -4.995 5.217l-.005 -.217l.005 -.217a5 5 0 0 1 4.995 -4.783z" />
        </>
      </svg>
    ) : (
      ""
    )
  }
  <a href={formatHref(item.href)} aria-label={item.text}>{item.text}</a>
</li>
