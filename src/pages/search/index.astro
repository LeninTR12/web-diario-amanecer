---
import Search01 from "@/assets/svgs/search-01.astro";
import BaseLayout from "@/layouts/base.astro";
import { searchHandler } from "@/lib/handlers/search";
import type { Meta } from "@/lib/types";
import "@pagefind/default-ui/css/ui.css";

const url = new URL(Astro.request.url);
const query = url.searchParams.get("q");
const type = url.searchParams.get("t");

const searchArticles = query ? await searchHandler.searchArticles(query) : [];

if (type) {
  return new Response(JSON.stringify(searchArticles), {
    status: 200,
    headers: {
      "Content-Type": "application/json",
    },
  });
}

const meta: Meta = {
  title: "",
  metaTitle: "",
  description: "",
  type: "website",
  ogImage: "",
  ogImageAlt: "",
};
---

<BaseLayout meta={meta}>
  <form
    action="/search"
    method="GET"
    aria-label="Search"
    class="flex w-[200px] h-6 bg-white text-[#1A346B] items-center justify-between rounded-full px-3 font-sans"
  >
    <input
      type="text"
      name="q"
      placeholder="Buscar"
      class="bg-transparent text-sm outline-none w-full placeholder-[#1A346B]"
    />
    <button type="submit" class="ml-2">
      <Search01 />
    </button>
  </form>
</BaseLayout>



<!-- <BaseLayout meta={meta}>
  <div class="container py-4">
    <script is:inline src="/pagefind/pagefind-ui.js"></script>

    <div id="search"></div>

    <script>
      const initializePagefind = () => {
        // Remove any existing Pagefind UI elements to avoid duplicates
        const existingSearchUI = document.querySelector(".pagefind-ui");
        if (existingSearchUI) {
          existingSearchUI.remove();
        }

        // Import dynamically to ensure proper re-initialization
        // @ts-expect-error
        import("@pagefind/default-ui")
          .then(({ PagefindUI }) => {
            new PagefindUI({
              element: "#search",
              showSubResults: true,
              showImages: false,
              autofocus: true,
            });

            const el = document.querySelector(".pagefind-ui");
            const input =
              el?.querySelector<HTMLInputElement>(`input[type="text"]`);
            const clearButton = el?.querySelector(".pagefind-ui__search-clear");
            const url = new URL(window.location.href);
            const params = new URLSearchParams(url.search);
            const query = params.get("q");

            if (clearButton) {
              clearButton.textContent = "âœ– Clear";
            }
            if (query && input) {
              input.value = query;
              input.dispatchEvent(new Event("input", { bubbles: true }));
            }

            input?.addEventListener("input", (e) => {
              const input = e.target as HTMLInputElement;
              const url = new URL(window.location.href);
              const params = new URLSearchParams(url.search);
              params.set("q", input.value);
              window.history.replaceState({}, "", `${url.pathname}?${params}`);
            });

            clearButton?.addEventListener("click", () => {
              const url = new URL(window.location.href);
              const params = new URLSearchParams(url.search);
              params.delete("q");
              window.history.replaceState({}, "", `${url.pathname}`);
            });
          })
          .catch(console.error);
      };

      document.addEventListener("astro:page-load", () => {
        initializePagefind();
      });
    </script>
  </div>
</BaseLayout>

<style is:inline>
  :root {
    --pagefind-ui-scale: 0.9;
    --pagefind-ui-primary: oklch(var(--p));
    --pagefind-ui-text: oklch(var(--bc));
    --pagefind-ui-background: oklch(var(--b1));
    --pagefind-ui-border: oklch(var(--b2));
    --pagefind-ui-tag: oklch(var(--b2));
    --pagefind-ui-border-width: 2px;
    --pagefind-ui-border-radius: 8px;
    --pagefind-ui-image-border-radius: 8px;
    --pagefind-ui-image-box-ratio: 3 / 2;
    --pagefind-ui-font: var(--font-sans);
  }
</style> -->
